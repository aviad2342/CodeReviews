/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import jsyntaxpane.DefaultSyntaxKit;

/**
 *
 * @author Aviad
 */
public class IfrmEditor extends javax.swing.JInternalFrame {

    /**view field*/
    private ViewLogic view;
    /**MyDesktopPane field*/
    private javax.swing.JDesktopPane myDesk;
    
    private String language;
    
    private String fileName;
    
    /**
     * Creates new form IfrmEditor
     * @param view
     * @param myDesk
     * @param file
     */
    public IfrmEditor(ViewLogic view, javax.swing.JDesktopPane myDesk, File file) {
        this.myDesk = myDesk;
        this.view = view;
        initComponents();
        DefaultSyntaxKit.initKit();
        fileName=file.getName();
        Dimension desktopSize = this.myDesk.getSize();   // the size of the desktopPane
        this.setSize(desktopSize);
        BufferedReader br;
        String everything="";
        try {
            br = new BufferedReader(new FileReader(file));
        
    try {
    StringBuilder sb = new StringBuilder();
    String line = br.readLine();

    while (line != null) {
        sb.append(line);
        sb.append(System.lineSeparator());
        line = br.readLine();
    }
     everything = sb.toString();
}           catch (IOException ex) {
                Logger.getLogger(frmCodeEditor.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    br.close();
                } catch (IOException ex) {
                    Logger.getLogger(frmCodeEditor.class.getName()).log(Level.SEVERE, null, ex);
                }
}
    } catch (FileNotFoundException ex) {
            Logger.getLogger(frmCodeEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
        language ="";
        int i=fileName.lastIndexOf(".");
        if(i>0)
        {
           language = fileName.substring(i+1);
        }
        if(language.equals("js"))
        {
            language = "javascript";
        }
        new Thread(new Runnable(){
        	
            @Override
            public void run(){
            	try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }   
            	JOptionPane.getRootFrame().dispose();
            	
               }
               
                
               
            
            }).start();
        codeEditor.setContentType("text/"+language);
        codeEditor.setText(everything);
        ((jsyntaxpane.DefaultSyntaxKit)(this.codeEditor.getEditorKit())).addToolBarActions(codeEditor, ToolBarE);
        ((javax.swing.plaf.basic.BasicInternalFrameUI)this.getUI()).setNorthPane(null);
    }
    
    public File getEditFile()
    {
        try {
            (new File("C:\\ProjectData")).mkdir();
            File file=new File("C:\\ProjectData\\"+fileName);
            if(file.createNewFile())
            {
               BufferedWriter out=new BufferedWriter(new FileWriter(file));
               out.write(codeEditor.getText());
               out.close();  
            }
            else
            {
               BufferedWriter out=new BufferedWriter(new FileWriter(file));
               out.flush();
               out.write(codeEditor.getText());
               out.close();
            }
             return file;
        } catch (IOException ex) {
            Logger.getLogger(IfrmEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
       return null;
    }
    
    public String getLanguage()
    {
       if(language != ""){
           return language;
       }
       return null;
    }
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        codeEditor = new javax.swing.JEditorPane();
        ToolBarE = new javax.swing.JToolBar();

        setBorder(null);

        jScrollPane1.setViewportView(codeEditor);

        ToolBarE.setRollover(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 957, Short.MAX_VALUE)
            .addComponent(ToolBarE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(ToolBarE, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar ToolBarE;
    private javax.swing.JEditorPane codeEditor;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
